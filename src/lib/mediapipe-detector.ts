// MediaPipe face detection and tracking utilities
import { FaceLandmarker, FilesetResolver, NormalizedLandmark } from '@mediapipe/tasks-vision';

export interface FaceTrackingData {
  isDetected: boolean;
  orientation: {
    yaw: number;
    pitch: number;
    roll: number;
    isLookingAway: boolean;
  };
  confidence: number;
  timestamp: number;
}

export class MediaPipeDetector {
  private faceLandmarker: FaceLandmarker | null = null;
  private isInitialized: boolean = false;
  private lastDetection: FaceTrackingData | null = null;
  private detectionHistory: FaceTrackingData[] = [];
  private readonly maxHistorySize = 10;

  async initialize(): Promise<boolean> {
    try {
      console.log('üéØ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÇ‡∏´‡∏•‡∏î MediaPipe FaceLandmarker...');
      
      const filesetResolver = await FilesetResolver.forVisionTasks(
        "https://cdn.jsdelivr.net/npm/@mediapipe/tasks-vision@0.10.22-rc.20250304/wasm"
      );

      this.faceLandmarker = await FaceLandmarker.createFromOptions(filesetResolver, {
        baseOptions: {
          modelAssetPath: "https://storage.googleapis.com/mediapipe-models/face_landmarker/face_landmarker/float16/1/face_landmarker.task",
          delegate: "GPU"
        },
        outputFaceBlendshapes: true,
        outputFacialTransformationMatrixes: true,
        runningMode: "VIDEO",
        numFaces: 1
      });

      this.isInitialized = true;
      console.log('‚úÖ MediaPipe FaceLandmarker ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
      return true;
    } catch (error) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î MediaPipe:', error);
      return false;
    }
  }

  async detectFromVideo(video: HTMLVideoElement, timestamp: number): Promise<FaceTrackingData | null> {
    if (!this.isInitialized || !this.faceLandmarker) {
      console.warn('‚ö†Ô∏è MediaPipe ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
      return null;
    }

    try {
      const results = this.faceLandmarker.detectForVideo(video, timestamp);
      
      if (!results.faceLandmarks || results.faceLandmarks.length === 0) {
        const noFaceData: FaceTrackingData = {
          isDetected: false,
          orientation: { yaw: 0, pitch: 0, roll: 0, isLookingAway: false },
          confidence: 0,
          timestamp
        };
        
        this.updateHistory(noFaceData);
        return noFaceData;
      }

      const landmarks = results.faceLandmarks[0];
      const trackingData = this.analyzeLandmarks(landmarks, timestamp);
      
      this.updateHistory(trackingData);
      this.lastDetection = trackingData;
      
      return trackingData;
    } catch (error) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤:', error);
      return null;
    }
  }

  private analyzeLandmarks(landmarks: NormalizedLandmark[], timestamp: number): FaceTrackingData {
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≤‡∏£‡∏´‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤ (Face Orientation) - Phase 1 ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ orientation
    const orientation = this.calculateFaceOrientation(landmarks);
    
    return {
      isDetected: true,
      orientation,
      confidence: 0.95, // MediaPipe ‡∏°‡∏±‡∏Å‡πÉ‡∏´‡πâ‡∏Ñ‡πà‡∏≤ confidence ‡∏™‡∏π‡∏á
      timestamp
    };
  }

  private calculateFaceOrientation(landmarks: NormalizedLandmark[]) {
    // ‡πÉ‡∏ä‡πâ‡∏à‡∏∏‡∏î‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ï‡∏≤‡∏° MediaPipe FaceMesh landmarks
    const noseTip = landmarks[1];           // ‡∏à‡∏°‡∏π‡∏Å (nose tip)
    const chin = landmarks[18];             // ‡∏Ñ‡∏≤‡∏á (chin)  
    const leftCheek = landmarks[116];       // ‡πÅ‡∏Å‡πâ‡∏°‡∏ã‡πâ‡∏≤‡∏¢ (left cheek)
    const rightCheek = landmarks[345];      // ‡πÅ‡∏Å‡πâ‡∏°‡∏Ç‡∏ß‡∏≤ (right cheek)
    const forehead = landmarks[10];         // ‡∏´‡∏ô‡πâ‡∏≤‡∏ú‡∏≤‡∏Å (forehead)

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì yaw (‡∏Å‡∏≤‡∏£‡∏´‡∏±‡∏ô‡∏ã‡πâ‡∏≤‡∏¢-‡∏Ç‡∏ß‡∏≤) ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡∏°‡∏ã‡πâ‡∏≤‡∏¢-‡∏Ç‡∏ß‡∏≤
    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏±‡∏ô‡∏ã‡πâ‡∏≤‡∏¢: ‡πÅ‡∏Å‡πâ‡∏°‡∏Ç‡∏ß‡∏≤‡∏à‡∏∞‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏Å‡∏•‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á (x ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤)
    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏±‡∏ô‡∏Ç‡∏ß‡∏≤: ‡πÅ‡∏Å‡πâ‡∏°‡∏ã‡πâ‡∏≤‡∏¢‡∏à‡∏∞‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏Å‡∏•‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á (x ‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤)
    const cheekDistance = rightCheek.x - leftCheek.x;
    const yaw = Math.atan2(cheekDistance, 0.1) * 180 / Math.PI;
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì pitch (‡∏Å‡∏≤‡∏£‡∏´‡∏±‡∏ô‡∏ö‡∏ô-‡∏•‡πà‡∏≤‡∏á) ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏à‡∏°‡∏π‡∏Å‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≤‡∏á
    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏±‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô: ‡∏à‡∏°‡∏π‡∏Å‡∏à‡∏∞‡∏≠‡∏¢‡∏π‡πà‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥
    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏±‡∏ô‡∏•‡∏á: ‡∏à‡∏°‡∏π‡∏Å‡∏à‡∏∞‡∏≠‡∏¢‡∏π‡πà‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥
    const noseToChinkDistance = noseTip.y - chin.y;
    const pitch = Math.atan2(noseToChinkDistance + 0.1, 0.1) * 180 / Math.PI - 45; // ‡∏õ‡∏£‡∏±‡∏ö offset
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì roll (‡∏Å‡∏≤‡∏£‡πÄ‡∏≠‡∏µ‡∏¢‡∏á‡∏®‡∏µ‡∏£‡∏©‡∏∞‡∏ã‡πâ‡∏≤‡∏¢-‡∏Ç‡∏ß‡∏≤)
    const eyeSlope = Math.atan2(rightCheek.y - leftCheek.y, rightCheek.x - leftCheek.x);
    const roll = eyeSlope * 180 / Math.PI;

    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î threshold ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ "‡∏´‡∏±‡∏ô‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏à‡∏≠" (‡πÄ‡∏Ç‡πâ‡∏°‡∏á‡∏ß‡∏î‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°)
    const YAW_THRESHOLD = 25;      // ‡∏≠‡∏á‡∏®‡∏≤ (‡∏•‡∏î‡∏à‡∏≤‡∏Å 30)
    const PITCH_THRESHOLD = 20;    // ‡∏≠‡∏á‡∏®‡∏≤ (‡∏•‡∏î‡∏à‡∏≤‡∏Å 25)
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏´‡∏±‡∏ô‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏à‡∏≠
    const isLookingAway = Math.abs(yaw) > YAW_THRESHOLD || Math.abs(pitch) > PITCH_THRESHOLD;

    // Debug logging (‡∏à‡∏∞‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡πÉ‡∏ô‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á)
    if (Math.abs(yaw) > 15 || Math.abs(pitch) > 15) {
      console.log(`üéØ Face Orientation - Yaw: ${yaw.toFixed(1)}¬∞, Pitch: ${pitch.toFixed(1)}¬∞, Roll: ${roll.toFixed(1)}¬∞, Away: ${isLookingAway}`);
    }

    return { yaw, pitch, roll, isLookingAway };
  }

  private calculateVariance(values: number[]): number {
    if (values.length === 0) return 0;
    
    const mean = values.reduce((sum, val) => sum + val, 0) / values.length;
    const squaredDiffs = values.map(val => Math.pow(val - mean, 2));
    
    return squaredDiffs.reduce((sum, diff) => sum + diff, 0) / values.length;
  }

  private updateHistory(data: FaceTrackingData): void {
    this.detectionHistory.push(data);
    
    // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ç‡∏ô‡∏≤‡∏î history
    if (this.detectionHistory.length > this.maxHistorySize) {
      this.detectionHistory.shift();
    }
  }

  getLastDetection(): FaceTrackingData | null {
    return this.lastDetection;
  }

  getDetectionHistory(): FaceTrackingData[] {
    return [...this.detectionHistory];
  }

  destroy(): void {
    if (this.faceLandmarker) {
      this.faceLandmarker.close();
      this.faceLandmarker = null;
    }
    this.isInitialized = false;
    this.lastDetection = null;
    this.detectionHistory = [];
    console.log('üßπ MediaPipe detector ‡∏ñ‡∏π‡∏Å‡∏•‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß');
  }
}