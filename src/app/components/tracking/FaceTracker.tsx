'use client'
import { useState, useEffect, useRef, useCallback } from 'react'
import { MediaPipeDetector, FaceTrackingData } from '@/lib/mediapipe-detector'
import { Button } from '@/app/components/ui/Button'
import { Card } from '@/app/components/ui/Card'

interface FaceTrackerProps {
  onTrackingStop: () => void
  sessionName?: string
}

export function FaceTracker({ onTrackingStop, sessionName = '‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö' }: FaceTrackerProps) {
  const [isActive, setIsActive] = useState(false)
  const [currentData, setCurrentData] = useState<FaceTrackingData | null>(null)
  const [stats, setStats] = useState({
    totalDetections: 0,
    faceAwayCount: 0,
    duration: 0
  })

  const videoRef = useRef<HTMLVideoElement>(null)
  const canvasRef = useRef<HTMLCanvasElement>(null)
  const detectorRef = useRef<MediaPipeDetector | null>(null)
  const streamRef = useRef<MediaStream | null>(null)
  const intervalRef = useRef<NodeJS.Timeout | null>(null)
  const startTimeRef = useRef<number>(0)

  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞ MediaPipe
  const initializeCamera = useCallback(async () => {
    try {
      console.log('üé• ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏•‡πâ‡∏≠‡∏á...')
      
      const stream = await navigator.mediaDevices.getUserMedia({
        video: {
          width: { ideal: 1280 },
          height: { ideal: 720 },
          facingMode: 'user'
        },
        audio: false
      })

      if (videoRef.current) {
        videoRef.current.srcObject = stream
        streamRef.current = stream
        
        videoRef.current.onloadedmetadata = () => {
          videoRef.current?.play()
          console.log('‚úÖ ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô')
        }
      }

      // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô MediaPipe detector
      if (!detectorRef.current) {
        console.log('üîß ‡∏™‡∏£‡πâ‡∏≤‡∏á MediaPipe detector ‡πÉ‡∏´‡∏°‡πà...')
        detectorRef.current = new MediaPipeDetector()
        
        console.log('‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î MediaPipe (‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤ 10-30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)...')
        const initialized = await detectorRef.current.initialize()
        
        if (!initialized) {
          console.error('üí• MediaPipe ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏î‡πâ')
          alert('MediaPipe ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏î‡πâ\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö internet connection\n‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏≠‡∏á refresh ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö')
          throw new Error('MediaPipe initialization failed')
        }
        
        console.log('üéâ MediaPipe ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!')
      }

      return true
    } catch (error) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏•‡πâ‡∏≠‡∏á:', error)
      alert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï')
      return false
    }
  }, [])

  // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á
  const stopCamera = useCallback(() => {
    if (streamRef.current) {
      streamRef.current.getTracks().forEach(track => track.stop())
      streamRef.current = null
    }

    if (videoRef.current) {
      videoRef.current.srcObject = null
    }

    if (detectorRef.current) {
      detectorRef.current.destroy()
      detectorRef.current = null
    }

    console.log('üé• ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß')
  }, [])

  // ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡πÅ‡∏ö‡∏ö real-time
  const performDetection = useCallback(async () => {
    console.log('üîÑ performDetection ‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å...', { 
      hasDetector: !!detectorRef.current, 
      hasVideo: !!videoRef.current, 
      isActive 
    });

    if (!detectorRef.current || !videoRef.current) {
      console.warn('‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö detection:', {
        detector: !!detectorRef.current,
        video: !!videoRef.current, 
        active: isActive
      });
      return;
    }

    try {
      const timestamp = performance.now()
      console.log('üéØ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å detectFromVideo...', timestamp);
      
      const trackingData = await detectorRef.current.detectFromVideo(videoRef.current, timestamp)
      console.log('üìã ‡πÑ‡∏î‡πâ tracking data:', trackingData);
      
      if (trackingData) {
        setCurrentData(trackingData)
        
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ face orientation)
        setStats(prev => {
          const newStats = {
            ...prev,
            totalDetections: prev.totalDetections + 1,
            duration: Math.floor((timestamp - startTimeRef.current) / 1000)
          }

          // ‡∏ô‡∏±‡∏ö‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Å‡∏≤‡∏£‡∏´‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏à‡∏≠
          if (trackingData.orientation.isLookingAway) {
            newStats.faceAwayCount++
            console.log('üö® ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏´‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏à‡∏≠!', newStats.faceAwayCount);
          }

          console.log('üìä ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥:', newStats);
          return newStats
        })

        // ‡∏ß‡∏≤‡∏î‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ö‡∏ô canvas
        drawDetectionOverlay(trackingData)
      } else {
        console.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö tracking data');
      }
    } catch (error) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö:', error)
    }
  }, [])

  // ‡∏ß‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ö‡∏ô canvas
  const drawDetectionOverlay = useCallback((data: FaceTrackingData) => {
    const canvas = canvasRef.current
    const video = videoRef.current
    
    if (!canvas || !video) return

    const ctx = canvas.getContext('2d')
    if (!ctx) return

    // ‡∏•‡πâ‡∏≤‡∏á canvas
    ctx.clearRect(0, 0, canvas.width, canvas.height)

    if (!data.isDetected) {
      // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤
      ctx.fillStyle = 'rgba(255, 0, 0, 0.8)'
      ctx.font = '24px Arial'
      ctx.fillText('‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤', 50, 50)
      return
    }

    // ‡∏ß‡∏≤‡∏î Sci-Fi Face Mesh ‡∏î‡πâ‡∏ß‡∏¢ landmarks ‡∏ó‡∏±‡πâ‡∏á 468 ‡∏à‡∏∏‡∏î
    if (data.landmarks && data.landmarks.length > 0) {
      console.log('üé® ‡∏ß‡∏≤‡∏î Face Mesh ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô landmarks:', data.landmarks.length);
      drawSciFiFaceMesh(ctx, data.landmarks, canvas.width, canvas.height, data.orientation.isLookingAway)
    } else {
      console.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ landmarks ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏≤‡∏î mesh');
    }

    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    const statusColor = data.orientation.isLookingAway ? '#FF4444' : '#00FF88'
    ctx.fillStyle = statusColor
    ctx.font = '16px "Courier New", monospace'
    ctx.shadowColor = statusColor
    ctx.shadowBlur = 10
    
    const statusTexts = [
      `FACE_DETECTION: ${data.isDetected ? 'ACTIVE' : 'INACTIVE'}`,
      `ORIENTATION: ${data.orientation.isLookingAway ? 'LOOKING_AWAY' : 'FOCUSED'}`,
      `YAW: ${data.orientation.yaw.toFixed(1)}¬∞`,
      `PITCH: ${data.orientation.pitch.toFixed(1)}¬∞`,
      `LANDMARKS: ${data.landmarks?.length || 0} POINTS`
    ]

    statusTexts.forEach((text, index) => {
      ctx.fillText(text, 20, canvas.height - 120 + (index * 22))
    })
    
    ctx.shadowBlur = 0
  }, [])

  // ‡∏ß‡∏≤‡∏î Sci-Fi Face Mesh ‡πÅ‡∏ö‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
  const drawSciFiFaceMesh = useCallback((
    ctx: CanvasRenderingContext2D, 
    landmarks: any[], 
    canvasWidth: number, 
    canvasHeight: number,
    isLookingAway: boolean
  ) => {
    console.log('üé® ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ß‡∏≤‡∏î Face Mesh...', { landmarks: landmarks.length, width: canvasWidth, height: canvasHeight });
    
    const primaryColor = isLookingAway ? '#FF4444' : '#00FF88'
    const secondaryColor = isLookingAway ? '#FF8888' : '#44FFAA'
    const glowColor = isLookingAway ? 'rgba(255, 68, 68, 0.3)' : 'rgba(0, 255, 136, 0.3)'

    try {
      // ‡∏ß‡∏≤‡∏î‡∏à‡∏∏‡∏î landmarks ‡∏ó‡∏±‡πâ‡∏á 468 ‡∏à‡∏∏‡∏î
      landmarks.forEach((landmark, index) => {
        if (!landmark || typeof landmark.x !== 'number' || typeof landmark.y !== 'number') {
          console.warn('‚ö†Ô∏è Invalid landmark at index', index, landmark);
          return;
        }

        const x = landmark.x * canvasWidth
        const y = landmark.y * canvasHeight

        // ‡∏ß‡∏≤‡∏î‡∏à‡∏∏‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
        if (index % 3 === 0) { // ‡∏ß‡∏≤‡∏î‡∏ó‡∏∏‡∏Å 3 ‡∏à‡∏∏‡∏î
          const pointSize = 1.5

          // ‡∏ß‡∏≤‡∏î‡∏à‡∏∏‡∏î‡∏´‡∏•‡∏±‡∏Å
          ctx.save()
          ctx.beginPath()
          ctx.arc(x, y, pointSize, 0, 2 * Math.PI)
          ctx.fillStyle = primaryColor
          ctx.fill()
          ctx.restore()
        }
      })

      // ‡∏ß‡∏≤‡∏î‡πÄ‡∏™‡πâ‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏Ñ‡∏£‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
      drawFaceContours(ctx, landmarks, canvasWidth, canvasHeight, primaryColor)
      drawEyeContours(ctx, landmarks, canvasWidth, canvasHeight, primaryColor)
      drawMouthContours(ctx, landmarks, canvasWidth, canvasHeight, primaryColor)
      drawNoseContours(ctx, landmarks, canvasWidth, canvasHeight, primaryColor)
      
      console.log('‚úÖ ‡∏ß‡∏≤‡∏î Face Mesh ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô');
    } catch (error) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏î Face Mesh:', error);
    }
  }, [])

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô landmark ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  const isKeyLandmark = useCallback((index: number): boolean => {
    // ‡∏à‡∏∏‡∏î‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤ (‡∏ï‡∏≤, ‡∏à‡∏°‡∏π‡∏Å, ‡∏õ‡∏≤‡∏Å, ‡πÇ‡∏Ñ‡∏£‡∏á‡∏´‡∏ô‡πâ‡∏≤)
    const keyPoints = [
      // ‡πÇ‡∏Ñ‡∏£‡∏á‡∏´‡∏ô‡πâ‡∏≤
      10, 151, 9, 8, 168, 6, 148, 176, 149, 150, 136, 172, 
      // ‡∏ï‡∏≤‡∏ã‡πâ‡∏≤‡∏¢
      33, 7, 163, 144, 145, 153, 154, 155, 133, 173, 157, 158, 159, 160, 161, 246,
      // ‡∏ï‡∏≤‡∏Ç‡∏ß‡∏≤  
      362, 382, 381, 380, 374, 373, 390, 249, 263, 466, 388, 387, 386, 385, 384, 398,
      // ‡∏à‡∏°‡∏π‡∏Å
      19, 20, 98, 97, 2, 326, 327, 294, 278, 344, 1, 5,
      // ‡∏õ‡∏≤‡∏Å
      61, 84, 17, 314, 405, 320, 307, 375, 321, 308, 324, 318
    ]
    return keyPoints.includes(index)
  }, [])

  // ‡∏ß‡∏≤‡∏î‡πÄ‡∏™‡πâ‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏´‡∏ô‡πâ‡∏≤
  const drawFaceContours = useCallback((
    ctx: CanvasRenderingContext2D,
    landmarks: any[],
    width: number,
    height: number,
    color: string
  ) => {
    // ‡∏à‡∏∏‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏´‡∏ô‡πâ‡∏≤ (Face Oval)
    const faceOval = [10, 338, 297, 332, 284, 251, 389, 356, 454, 323, 361, 288, 397, 365, 379, 378, 400, 377, 152, 148, 176, 149, 150, 136, 172, 58, 132, 93, 234, 127, 162, 21, 54, 103, 67, 109, 10]
    
    drawConnectedLines(ctx, landmarks, faceOval, width, height, color, 1)
  }, [])

  // ‡∏ß‡∏≤‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏ï‡∏≤
  const drawEyeContours = useCallback((
    ctx: CanvasRenderingContext2D,
    landmarks: any[],
    width: number,
    height: number,
    color: string
  ) => {
    // ‡∏ï‡∏≤‡∏ã‡πâ‡∏≤‡∏¢
    const leftEye = [33, 7, 163, 144, 145, 153, 154, 155, 133, 173, 157, 158, 159, 160, 161, 246, 33]
    drawConnectedLines(ctx, landmarks, leftEye, width, height, color, 1.5)
    
    // ‡∏ï‡∏≤‡∏Ç‡∏ß‡∏≤
    const rightEye = [362, 382, 381, 380, 374, 373, 390, 249, 263, 466, 388, 387, 386, 385, 384, 398, 362]
    drawConnectedLines(ctx, landmarks, rightEye, width, height, color, 1.5)
  }, [])

  // ‡∏ß‡∏≤‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏õ‡∏≤‡∏Å
  const drawMouthContours = useCallback((
    ctx: CanvasRenderingContext2D,
    landmarks: any[],
    width: number,
    height: number,
    color: string
  ) => {
    // ‡∏Ç‡∏≠‡∏ö‡∏õ‡∏≤‡∏Å‡∏ô‡∏≠‡∏Å
    const outerLips = [61, 84, 17, 314, 405, 320, 307, 375, 321, 308, 324, 318, 402, 317, 14, 87, 178, 88, 95, 61]
    drawConnectedLines(ctx, landmarks, outerLips, width, height, color, 1.5)
    
    // ‡∏Ç‡∏≠‡∏ö‡∏õ‡∏≤‡∏Å‡πÉ‡∏ô
    const innerLips = [78, 95, 88, 178, 87, 14, 317, 402, 318, 324, 308, 415, 310, 311, 312, 13, 82, 81, 80, 78]
    drawConnectedLines(ctx, landmarks, innerLips, width, height, color, 1)
  }, [])

  // ‡∏ß‡∏≤‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏à‡∏°‡∏π‡∏Å
  const drawNoseContours = useCallback((
    ctx: CanvasRenderingContext2D,
    landmarks: any[],
    width: number,
    height: number,
    color: string
  ) => {
    // ‡∏î‡∏±‡πà‡∏á‡∏à‡∏°‡∏π‡∏Å
    const noseBridge = [6, 168, 8, 9, 10, 151]
    drawConnectedLines(ctx, landmarks, noseBridge, width, height, color, 1.5)
    
    // ‡∏õ‡∏µ‡∏Å‡∏à‡∏°‡∏π‡∏Å
    const noseWings = [98, 97, 2, 326, 327, 294, 278, 344, 358, 279, 420, 399, 437, 355, 371, 329, 348, 36, 131, 134, 102, 48, 115, 131]
    drawConnectedLines(ctx, landmarks, noseWings, width, height, color, 1)
  }, [])

  // ‡∏ß‡∏≤‡∏î‡πÄ‡∏™‡πâ‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏à‡∏∏‡∏î
  const drawConnectedLines = useCallback((
    ctx: CanvasRenderingContext2D,
    landmarks: any[],
    indices: number[],
    width: number,
    height: number,
    color: string,
    lineWidth: number
  ) => {
    if (indices.length < 2) return

    try {
      ctx.save()
      ctx.strokeStyle = color
      ctx.lineWidth = lineWidth
      ctx.shadowColor = color
      ctx.shadowBlur = 3
      ctx.globalCompositeOperation = 'screen'

      ctx.beginPath()
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö landmark ‡πÅ‡∏£‡∏Å
      if (!landmarks[indices[0]]) {
        console.warn('‚ö†Ô∏è Missing landmark at index:', indices[0]);
        ctx.restore();
        return;
      }
      
      let startX = landmarks[indices[0]].x * width
      let startY = landmarks[indices[0]].y * height
      ctx.moveTo(startX, startY)

      for (let i = 1; i < indices.length; i++) {
        if (!landmarks[indices[i]]) {
          console.warn('‚ö†Ô∏è Missing landmark at index:', indices[i]);
          continue;
        }
        
        const x = landmarks[indices[i]].x * width
        const y = landmarks[indices[i]].y * height
        ctx.lineTo(x, y)
      }

      ctx.stroke()
      ctx.restore()
    } catch (error) {
      console.error('‚ùå Error drawing connected lines:', error);
      ctx.restore();
    }
  }, [])

  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
  const startTracking = useCallback(async () => {
    console.log('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô startTracking...');
    
    const initialized = await initializeCamera()
    if (!initialized) {
      console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ');
      return;
    }

    console.log('‚úÖ ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    setIsActive(true)
    startTimeRef.current = performance.now()
    
    // ‡πÄ‡∏£‡∏¥‡πà‡∏° detection loop
    console.log('‚è∞ ‡∏ï‡∏±‡πâ‡∏á interval ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö detection...');
    intervalRef.current = setInterval(() => {
      console.log('‚è±Ô∏è Interval tick - ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å performDetection');
      performDetection();
    }, 100) // ‡∏ó‡∏∏‡∏Å 100ms
    
    console.log('üéØ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° - interval ID:', intervalRef.current)
    
  }, [initializeCamera, performDetection])

  // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
  const stopTracking = useCallback(() => {
    setIsActive(false)
    
    if (intervalRef.current) {
      clearInterval(intervalRef.current)
      intervalRef.current = null
    }
    
    stopCamera()
    onTrackingStop()
    
    console.log('‚èπÔ∏è ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°', stats)
  }, [stopCamera, onTrackingStop, stats])

  // Cleanup ‡πÄ‡∏°‡∏∑‡πà‡∏≠ component unmount
  useEffect(() => {
    return () => {
      if (intervalRef.current) {
        clearInterval(intervalRef.current)
      }
      stopCamera()
    }
  }, [stopCamera])

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡∏ô‡∏≤‡∏î canvas ‡πÄ‡∏°‡∏∑‡πà‡∏≠ video ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
  useEffect(() => {
    const video = videoRef.current
    const canvas = canvasRef.current
    
    if (video && canvas) {
      const updateCanvasSize = () => {
        canvas.width = video.videoWidth
        canvas.height = video.videoHeight
      }
      
      video.addEventListener('loadedmetadata', updateCanvasSize)
      return () => video.removeEventListener('loadedmetadata', updateCanvasSize)
    }
  }, [])

  const formatTime = (seconds: number) => {
    const minutes = Math.floor(seconds / 60)
    const secs = seconds % 60
    return `${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`
  }

  // Auto-start tracking when component mounts
  useEffect(() => {
    console.log('üîÑ useEffect auto-start ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô...', { isActive });
    
    if (!isActive) {
      console.log('‚ö° ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£ tracking ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥...');
      startTracking()
    }
  }, []) // Run once on mount only (remove dependencies to prevent loops)

  return (
    <Card className="w-full h-full">
      <div className="p-6">
        

        {/* Video and Canvas Container */}
        <div className="relative mb-6">
          <video
            ref={videoRef}
            className="w-full h-auto rounded-lg bg-black"
            autoPlay
            muted
            playsInline
          />
          <canvas
            ref={canvasRef}
            className="absolute inset-0 w-full h-full"
            style={{ pointerEvents: 'none' }}
          />
          
          
        </div>

        {/* Live Stats - ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Face Orientation */}
        {isActive && (
          <div className="grid grid-cols-2 md:grid-cols-3 gap-4 mb-6">
            <div className="bg-blue-50 p-4 rounded-lg text-center">
              <div className="text-2xl font-bold text-blue-600">{stats.totalDetections}</div>
              <div className="text-sm text-blue-500">‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö</div>
            </div>
            
            <div className="bg-red-50 p-4 rounded-lg text-center">
              <div className="text-2xl font-bold text-red-600">{stats.faceAwayCount}</div>
              <div className="text-sm text-red-500">‡∏´‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏à‡∏≠</div>
            </div>
            
            <div className="bg-green-50 p-4 rounded-lg text-center">
              <div className="text-2xl font-bold text-green-600">
                {stats.totalDetections > 0 ? Math.round(((stats.totalDetections - stats.faceAwayCount) / stats.totalDetections) * 100) : 0}%
              </div>
              <div className="text-sm text-green-500">‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏°‡∏≠‡∏á‡∏ï‡∏£‡∏á</div>
            </div>
          </div>
        )}

        {/* Current Detection Status - ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Face Orientation */}
        {isActive && currentData && (
          <div className="bg-gray-50 p-4 rounded-lg">
            <h3 className="font-semibold mb-2">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:</h3>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-2 text-sm">
              <div className={`p-2 rounded ${currentData.isDetected ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>
                Face: {currentData.isDetected ? '‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö' : '‡πÑ‡∏°‡πà‡∏û‡∏ö'}
              </div>
              <div className={`p-2 rounded ${currentData.orientation.isLookingAway ? 'bg-red-100 text-red-800' : 'bg-green-100 text-green-800'}`}>
                Head: {currentData.orientation.isLookingAway ? '‡∏´‡∏±‡∏ô‡∏≠‡∏≠‡∏Å' : '‡∏°‡∏≠‡∏á‡∏ï‡∏£‡∏á'}
              </div>
              <div className="p-2 rounded bg-blue-100 text-blue-800">
                Yaw: {currentData.orientation.yaw.toFixed(1)}¬∞
              </div>
              <div className="p-2 rounded bg-blue-100 text-blue-800">
                Pitch: {currentData.orientation.pitch.toFixed(1)}¬∞
              </div>
            </div>
          </div>
        )}

        {/* Control Buttons */}
        {isActive && (
          <div className="flex justify-center mt-6">
            <Button
              onClick={stopTracking}
              variant="secondary"
              className="px-8 py-3"
            >
              ‚èπÔ∏è ‡∏´‡∏¢‡∏∏‡∏î‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
            </Button>
          </div>
        )}
      </div>
    </Card>
  )
}