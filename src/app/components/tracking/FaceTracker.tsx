'use client'
import { useRef, useEffect, useCallback } from 'react'
import { FaceTrackingData } from '@/lib/mediapipe-detector'
import { Card } from '@/app/components/ui/Card'
import { VideoPlayer } from './VideoPlayer'
import { OverlayCanvas } from './OverlayCanvas'
import { DetectionStats } from './DetectionStats'
import { ControlPanel } from './ControlPanel'
import { useCamera } from '@/hooks/useCamera'
import { useFaceDetection } from '@/hooks/useFaceDetection'
import { drawSciFiFaceMesh, drawStatusInfo } from '@/lib/face-mesh-utils'

interface FaceTrackerProps {
  onTrackingStop: () => void
  sessionName?: string
}

export function FaceTracker({ onTrackingStop, sessionName = '‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö' }: FaceTrackerProps) {
  const videoRef = useRef<HTMLVideoElement>(null)
  const canvasRef = useRef<HTMLCanvasElement>(null)

  // ‡πÉ‡∏ä‡πâ custom hooks
  const { initializeCamera, stopCamera } = useCamera()
  const { 
    isActive, 
    currentData, 
    isRecording, 
    orientationStats, 
    initializeDetector, 
    startDetection, 
    stopDetection,
    startRecording,
    stopRecording,
    getCurrentStats,
    getOrientationHistory
  } = useFaceDetection()

  // ‡∏ß‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ö‡∏ô canvas
  const drawDetectionOverlay = useCallback((data: FaceTrackingData) => {
    const canvas = canvasRef.current
    const video = videoRef.current
    
    if (!canvas || !video) return

    const ctx = canvas.getContext('2d')
    if (!ctx) return

    // ‡∏•‡πâ‡∏≤‡∏á canvas
    ctx.clearRect(0, 0, canvas.width, canvas.height)

    if (!data.isDetected) {
      // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤
      ctx.fillStyle = 'rgba(255, 0, 0, 0.8)'
      ctx.font = '24px Arial'
      ctx.fillText('‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤', 50, 50)
      return
    }

    // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤ (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö)
    if (data.multipleFaces && data.multipleFaces.isSecurityRisk) {
      ctx.fillStyle = 'rgba(255, 0, 0, 0.9)'
      ctx.font = 'bold 20px Arial'
      ctx.fillText('üö® ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏û‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö!', 50, 30)
      ctx.fillStyle = 'rgba(255, 255, 0, 0.8)'
      ctx.font = '16px Arial'
      ctx.fillText(`‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤: ${data.multipleFaces.count}`, 50, 55)
    }

    // ‡∏ß‡∏≤‡∏î Sci-Fi Face Mesh ‡∏î‡πâ‡∏ß‡∏¢ landmarks ‡∏ó‡∏±‡πâ‡∏á 468 ‡∏à‡∏∏‡∏î
    if (data.landmarks && data.landmarks.length > 0) {
      drawSciFiFaceMesh(ctx, data.landmarks, video, canvas.width, canvas.height, data.orientation.isLookingAway)
    }

    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    drawStatusInfo(ctx, data, canvas.width, canvas.height)
  }, [])

  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
  const startTracking = useCallback(async () => {
    try {
      const cameraInitialized = await initializeCamera(videoRef)
      if (!cameraInitialized) {
        alert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï')
        return
      }

      await initializeDetector()
      
      startDetection(videoRef, drawDetectionOverlay)
    } catch (error) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô:', error)
      alert('MediaPipe ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏î‡πâ\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö internet connection\n‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏≠‡∏á refresh ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö')
    }
  }, [initializeCamera, initializeDetector, startDetection, drawDetectionOverlay])

  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• orientation
  const handleStartRecording = useCallback(() => {
    if (!isActive) {
      alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô')
      return
    }
    
    const started = startRecording()
    if (started) {
      console.log('üé¨ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å orientation data ‡πÅ‡∏•‡πâ‡∏ß')
    }
  }, [isActive, startRecording])
  
  // ‡∏´‡∏¢‡∏∏‡∏î‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
  const handleStopRecording = useCallback(async () => {
    const events = stopRecording()
    const stats = getCurrentStats()
    
    console.log('üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏´‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤:', stats)
    console.log('üìù ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î events:', events)
    
    // TODO: ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á database
    // ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ /api/tracking/orientation ‡πÑ‡∏î‡πâ
    
    alert(`‡∏´‡∏¢‡∏∏‡∏î‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß!\n\n‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:\n‚Ä¢ ‡∏´‡∏±‡∏ô‡∏ã‡πâ‡∏≤‡∏¢: ${stats?.leftTurns.count || 0} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á (${stats?.leftTurns.totalDuration || 0} ‡∏ß‡∏¥)\n‚Ä¢ ‡∏´‡∏±‡∏ô‡∏Ç‡∏ß‡∏≤: ${stats?.rightTurns.count || 0} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á (${stats?.rightTurns.totalDuration || 0} ‡∏ß‡∏¥)\n‚Ä¢ ‡∏Å‡πâ‡∏°‡∏´‡∏ô‡πâ‡∏≤: ${stats?.lookingDown.count || 0} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á (${stats?.lookingDown.totalDuration || 0} ‡∏ß‡∏¥)\n‚Ä¢ ‡πÄ‡∏á‡∏¢‡∏´‡∏ô‡πâ‡∏≤: ${stats?.lookingUp.count || 0} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á (${stats?.lookingUp.totalDuration || 0} ‡∏ß‡∏¥)\n‚Ä¢ ‡∏£‡∏ß‡∏° events: ${stats?.totalEvents || 0} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á`)
  }, [stopRecording, getCurrentStats])

  // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
  const stopTracking = useCallback(() => {
    // ‡∏´‡∏¢‡∏∏‡∏î‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡πà‡∏≠‡∏ô (‡∏ñ‡πâ‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏¢‡∏π‡πà)
    if (isRecording) {
      handleStopRecording()
    }
    
    stopDetection()
    stopCamera(videoRef)
    onTrackingStop()
  }, [stopDetection, stopCamera, onTrackingStop, isRecording, handleStopRecording])

  // Cleanup ‡πÄ‡∏°‡∏∑‡πà‡∏≠ component unmount
  useEffect(() => {
    return () => {
      stopCamera(videoRef)
    }
  }, [stopCamera])

  // Auto-start tracking when component mounts
  useEffect(() => {
    if (!isActive) {
      startTracking()
    }
  }, [startTracking, isActive])

  return (
    <Card className="w-full h-full">
      <div className="p-6">
        {/* Video and Canvas Container */}
        <div className="relative mb-6">
          <VideoPlayer ref={videoRef} />
          <OverlayCanvas ref={canvasRef} videoRef={videoRef} />
        </div>

        {/* Current Detection Status */}
        <DetectionStats data={currentData} isActive={isActive} />

        {/* Orientation Recording Controls */}
        <div className="mb-4 p-4 bg-blue-50 rounded-lg border border-blue-200">
          <h3 className="text-lg font-semibold text-blue-800 mb-3">üìä ‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏´‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤</h3>
          
          <div className="flex gap-3 mb-3">
            <button
              onClick={handleStartRecording}
              disabled={!isActive || isRecording}
              className={`px-4 py-2 rounded-lg font-medium transition-colors ${
                !isActive || isRecording
                  ? 'bg-gray-300 text-gray-500 cursor-not-allowed'
                  : 'bg-green-500 text-white hover:bg-green-600'
              }`}
            >
              üé¨ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            </button>
            
            <button
              onClick={handleStopRecording}
              disabled={!isRecording}
              className={`px-4 py-2 rounded-lg font-medium transition-colors ${
                !isRecording
                  ? 'bg-gray-300 text-gray-500 cursor-not-allowed'
                  : 'bg-red-500 text-white hover:bg-red-600'
              }`}
            >
              üõë ‡∏´‡∏¢‡∏∏‡∏î‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
            </button>
          </div>
          
          <div className="flex items-center gap-2">
            <div className={`w-3 h-3 rounded-full ${isRecording ? 'bg-red-500 animate-pulse' : 'bg-gray-300'}`}></div>
            <span className={`text-sm font-medium ${isRecording ? 'text-red-600' : 'text-gray-500'}`}>
              {isRecording ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...' : '‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'}
            </span>
          </div>
        </div>

        {/* Live Orientation Statistics */}
        {orientationStats && isRecording && (
          <div className="mb-4 p-4 bg-purple-50 rounded-lg border border-purple-200">
            <h3 className="text-lg font-semibold text-purple-800 mb-3">üìà ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏´‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤ (‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå)</h3>
            
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-3">
              <div className="text-center p-2 bg-white rounded border">
                <div className="text-2xl font-bold text-blue-600">{orientationStats.leftTurns.count}</div>
                <div className="text-sm text-gray-600">‡∏´‡∏±‡∏ô‡∏ã‡πâ‡∏≤‡∏¢</div>
                <div className="text-xs text-gray-500">{orientationStats.leftTurns.totalDuration}‡∏ß‡∏¥</div>
              </div>
              
              <div className="text-center p-2 bg-white rounded border">
                <div className="text-2xl font-bold text-green-600">{orientationStats.rightTurns.count}</div>
                <div className="text-sm text-gray-600">‡∏´‡∏±‡∏ô‡∏Ç‡∏ß‡∏≤</div>
                <div className="text-xs text-gray-500">{orientationStats.rightTurns.totalDuration}‡∏ß‡∏¥</div>
              </div>
              
              <div className="text-center p-2 bg-white rounded border">
                <div className="text-2xl font-bold text-red-600">{orientationStats.lookingDown.count}</div>
                <div className="text-sm text-gray-600">‡∏Å‡πâ‡∏°‡∏´‡∏ô‡πâ‡∏≤</div>
                <div className="text-xs text-gray-500">{orientationStats.lookingDown.totalDuration}‡∏ß‡∏¥</div>
              </div>
              
              <div className="text-center p-2 bg-white rounded border">
                <div className="text-2xl font-bold text-yellow-600">{orientationStats.lookingUp.count}</div>
                <div className="text-sm text-gray-600">‡πÄ‡∏á‡∏¢‡∏´‡∏ô‡πâ‡∏≤</div>
                <div className="text-xs text-gray-500">{orientationStats.lookingUp.totalDuration}‡∏ß‡∏¥</div>
              </div>
            </div>
            
            <div className="flex justify-between text-sm text-gray-600">
              <span>üìä ‡∏£‡∏ß‡∏° {orientationStats.totalEvents} events</span>
              <span>üïê ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å: {orientationStats.sessionStartTime}</span>
              {orientationStats.lastEventTime && (
                <span>üïê Event ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {orientationStats.lastEventTime}</span>
              )}
            </div>
          </div>
        )}
        {/* Control Buttons */}
        <ControlPanel isActive={isActive} onStop={stopTracking} />
      </div>
    </Card>
  )
}