'use client'
import { useRef, useEffect, useState } from 'react'
import { Button } from '@/app/components/ui/Button'
import { Card } from '@/app/components/ui/Card'
import { loadFaceApiModels, detectFacePose, isPoseReady, detectFaceAndGetDescriptor } from '@/lib/face-api'

interface FaceLoginProps {
  isOpen: boolean
  userId: string
  onSuccess: () => void
  onCancel: () => void
}

type PoseType = 'front' | 'left' | 'right' | 'blink';

interface PoseData {
  type: PoseType;
  title: string;
  instruction: string;
  icon: string;
}

export function FaceLogin({ isOpen, userId, onSuccess, onCancel }: FaceLoginProps) {
  const videoRef = useRef<HTMLVideoElement>(null)
  const detectionIntervalRef = useRef<NodeJS.Timeout | null>(null)
  
  // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
  const [isStreaming, setIsStreaming] = useState(false)
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState('')
  const [isModelLoading, setIsModelLoading] = useState(true)
  
  // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô 4 ‡∏ó‡πà‡∏≤
  const [currentPoseIndex, setCurrentPoseIndex] = useState(0)
  const [verifiedPoses, setVerifiedPoses] = useState<{ [key in PoseType]?: boolean }>({})
  const [isVerifyingPose, setIsVerifyingPose] = useState(false)
  const [poseProgress, setPoseProgress] = useState(0)
  const [isAllPosesVerified, setIsAllPosesVerified] = useState(false)
  
  // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå
  const [currentDetectedPose, setCurrentDetectedPose] = useState<'front' | 'left' | 'right' | 'unknown'>('unknown')
  const [poseConfidence, setPoseConfidence] = useState(0)
  const [poseStableCount, setPoseStableCount] = useState(0)
  const [isBlinking, setIsBlinking] = useState(false)
  const [autoVerifying, setAutoVerifying] = useState(false)
  
  const poses: PoseData[] = [
    { type: 'front', title: '‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏£‡∏á', instruction: '‡∏°‡∏≠‡∏á‡∏ï‡∏£‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á', icon: 'üßë' },
    { type: 'left', title: '‡∏´‡∏±‡∏ô‡∏ã‡πâ‡∏≤‡∏¢', instruction: '‡∏´‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏õ‡∏ó‡∏≤‡∏á‡∏ã‡πâ‡∏≤‡∏¢ 30 ‡∏≠‡∏á‡∏®‡∏≤', icon: 'üëà' },
    { type: 'right', title: '‡∏´‡∏±‡∏ô‡∏Ç‡∏ß‡∏≤', instruction: '‡∏´‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏õ‡∏ó‡∏≤‡∏á‡∏Ç‡∏ß‡∏≤ 30 ‡∏≠‡∏á‡∏®‡∏≤', icon: 'üëâ' },
    { type: 'blink', title: '‡∏Å‡∏£‡∏∞‡∏û‡∏£‡∏¥‡∏ö‡∏ï‡∏≤', instruction: '‡∏Å‡∏£‡∏∞‡∏û‡∏£‡∏¥‡∏ö‡∏ï‡∏≤ 2-3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á', icon: 'üëÅÔ∏è' }
  ]
  
  const currentPose = poses[currentPoseIndex]

  useEffect(() => {
    if (isOpen) {
      initializeFaceApi()
    } else {
      stopCamera()
    }
    
    return () => {
      stopCamera()
      if (detectionIntervalRef.current) {
        clearInterval(detectionIntervalRef.current)
      }
    }
  }, [isOpen])

  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ó‡πà‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏ï‡∏£‡∏µ‡∏°‡∏°‡∏¥‡πà‡∏á
  useEffect(() => {
    if (isStreaming && !isModelLoading && !isAllPosesVerified) {
      startContinuousDetection()
    } else {
      stopContinuousDetection()
    }
    
    return () => stopContinuousDetection()
  }, [isStreaming, isModelLoading, isAllPosesVerified])
  
  // ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ó‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà
  useEffect(() => {
    if (!autoVerifying && !isVerifyingPose && !isAllPosesVerified) {
      const targetPose = currentPose.type
      const isReady = isPoseReady(currentDetectedPose, targetPose, poseConfidence, isBlinking)
      
      if (isReady) {
        setPoseStableCount(prev => prev + 1)
        
        // ‡∏´‡∏≤‡∏Å‡∏ó‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 10 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ô (~1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ) ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
        if (poseStableCount >= 10) {
          handleAutoVerify()
        }
      } else {
        setPoseStableCount(0)
      }
    }
  }, [currentDetectedPose, poseConfidence, isBlinking, poseStableCount, autoVerifying, isVerifyingPose, isAllPosesVerified])

  const initializeFaceApi = async () => {
    try {
      setIsModelLoading(true)
      await loadFaceApiModels()
      await startCamera()
    } catch (err) {
      setError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• AI ‡πÑ‡∏î‡πâ')
      console.error('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Face API:', err)
    } finally {
      setIsModelLoading(false)
    }
  }

  const startCamera = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({
        video: {
          width: { ideal: 640 },
          height: { ideal: 480 },
          facingMode: 'user'
        }
      })

      if (videoRef.current) {
        videoRef.current.srcObject = stream
        
        videoRef.current.onloadedmetadata = () => {
          videoRef.current?.play().catch(err => {
            console.error('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠:', err)
            setError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÑ‡∏î‡πâ')
          })
        }
        
        videoRef.current.onplaying = () => {
          setIsStreaming(true)
          setError('')
        }
        
        videoRef.current.onerror = (err) => {
          console.error('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠:', err)
          setError('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏±‡∏ö‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà')
        }
      }
    } catch (err: any) {
      console.error('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á:', err)
      
      if (err.name === 'NotAllowedError') {
        setError('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà')
      } else if (err.name === 'NotFoundError') {
        setError('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á')
      } else if (err.name === 'NotReadableError') {
        setError('‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏≠‡∏∑‡πà‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏õ‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Å‡∏•‡πâ‡∏≠‡∏á')
      } else if (err.name === 'AbortError') {
        setError('‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà')
      } else {
        setError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á')
      }
    }
  }

  const stopCamera = () => {
    if (videoRef.current?.srcObject) {
      const tracks = (videoRef.current.srcObject as MediaStream).getTracks()
      tracks.forEach(track => track.stop())
      setIsStreaming(false)
    }
  }

  const startContinuousDetection = () => {
    if (detectionIntervalRef.current) return
    
    detectionIntervalRef.current = setInterval(async () => {
      if (videoRef.current && !isVerifyingPose && !autoVerifying) {
        try {
          const detection = await detectFacePose(videoRef.current)
          
          if (detection.detected) {
            setCurrentDetectedPose(detection.pose)
            setPoseConfidence(detection.confidence)
            setIsBlinking(detection.isBlinking || false)
          } else {
            setCurrentDetectedPose('unknown')
            setPoseConfidence(0)
            setIsBlinking(false)
            setPoseStableCount(0)
          }
        } catch (error) {
          console.error('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á:', error)
        }
      }
    }, 100)
  }
  
  const stopContinuousDetection = () => {
    if (detectionIntervalRef.current) {
      clearInterval(detectionIntervalRef.current)
      detectionIntervalRef.current = null
    }
  }

  const playSuccessSound = () => {
    try {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏ä‡∏¥‡∏á‡∏ö‡∏ß‡∏Å‡∏î‡πâ‡∏ß‡∏¢ Web Audio API
      const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)()
      
      // ‡πÇ‡∏ô‡∏ï‡∏î‡∏ô‡∏ï‡∏£‡∏µ C5, D5, E5, F5
      const frequencies = [523.25, 587.33, 659.25, 698.46]
      const frequency = frequencies[currentPoseIndex] || 523.25
      
      const oscillator = audioContext.createOscillator()
      const gainNode = audioContext.createGain()
      
      oscillator.connect(gainNode)
      gainNode.connect(audioContext.destination)
      
      oscillator.frequency.setValueAtTime(frequency, audioContext.currentTime)
      oscillator.type = 'sine'
      
      gainNode.gain.setValueAtTime(0.3, audioContext.currentTime)
      gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.3)
      
      oscillator.start(audioContext.currentTime)
      oscillator.stop(audioContext.currentTime + 0.3)
    } catch (error) {
      console.log('‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡∏π‡∏Å‡∏ö‡∏•‡πá‡∏≠‡∏Å')
    }
  }

  const playCompletionSound = () => {
    try {
      // ‡∏ó‡πà‡∏ß‡∏á‡∏ó‡∏≥‡∏ô‡∏≠‡∏á C5, E5, G5, C6
      const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)()
      
      const melody = [523.25, 659.25, 783.99, 1046.50]
      
      melody.forEach((frequency, index) => {
        const oscillator = audioContext.createOscillator()
        const gainNode = audioContext.createGain()
        
        oscillator.connect(gainNode)
        gainNode.connect(audioContext.destination)
        
        oscillator.frequency.setValueAtTime(frequency, audioContext.currentTime)
        oscillator.type = 'sine'
        
        const startTime = audioContext.currentTime + (index * 0.2)
        gainNode.gain.setValueAtTime(0.2, startTime)
        gainNode.gain.exponentialRampToValueAtTime(0.01, startTime + 0.4)
        
        oscillator.start(startTime)
        oscillator.stop(startTime + 0.4)
      })
    } catch (error) {
      console.log('‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡∏π‡∏Å‡∏ö‡∏•‡πá‡∏≠‡∏Å')
    }
  }

  const handleAutoVerify = async () => {
    if (!videoRef.current || isVerifyingPose || autoVerifying) return

    try {
      setError('')
      setIsVerifyingPose(true)
      setAutoVerifying(true)
      setPoseStableCount(0)

      // ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ó‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
      const newVerifiedPoses = {
        ...verifiedPoses,
        [currentPose.type]: true
      }
      setVerifiedPoses(newVerifiedPoses)

      setPoseProgress(100)
      
      // ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      playSuccessSound()
      
      setTimeout(() => {
        if (currentPoseIndex < poses.length - 1) {
          setCurrentPoseIndex(prev => prev + 1)
          setPoseProgress(0)
        } else {
          setIsAllPosesVerified(true)
          // ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
          playCompletionSound()
          // ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
          handleFinalVerification(newVerifiedPoses)
        }
        setIsVerifyingPose(false)
        setAutoVerifying(false)
      }, 1500)

    } catch (err: any) {
      setError(err.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ó‡πà‡∏≤‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà')
      console.error('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ó‡πà‡∏≤:', err)
      setIsVerifyingPose(false)
      setAutoVerifying(false)
    }
  }

  const handleFinalVerification = async (verifiedPoses: any) => {
    if (!videoRef.current) return

    setLoading(true)
    setError('')

    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
      const faceDescriptor = await detectFaceAndGetDescriptor(videoRef.current)
      
      // ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
      const response = await fetch('/api/auth/face-verify', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          userId,
          faceData: faceDescriptor,
          verifiedPoses // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß
        })
      })

      const result = await response.json()

      if (response.ok && result.isMatch) {
        onSuccess()
      } else {
        setError(result.message || '‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô')
        // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
        handleRestart()
      }

    } catch (err: any) {
      setError(err.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö')
      handleRestart()
    } finally {
      setLoading(false)
    }
  }

  const handleRestart = () => {
    setCurrentPoseIndex(0)
    setVerifiedPoses({})
    setPoseProgress(0)
    setIsAllPosesVerified(false)
    setIsVerifyingPose(false)
    setAutoVerifying(false)
    setPoseStableCount(0)
    setCurrentDetectedPose('unknown')
    setPoseConfidence(0)
  }

  if (!isOpen) return null

  return (
    <div className="fixed inset-0  flex items-center justify-center z-50 p-4">
      <Card className="p-8 w-full max-w-lg">
        <div className="text-center mb-6">
          <div className="w-16 h-16 bg-gradient-to-br from-purple-500 to-purple-600 rounded-full mx-auto mb-4 flex items-center justify-center">
            <svg className="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4" />
            </svg>
          </div>
          <h2 className="text-2xl font-bold text-gray-800">‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤</h2>
          <p className="text-lg text-gray-600 font-semibold mt-2">
            {isAllPosesVerified ? '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' : `${currentPose.title} (${currentPoseIndex + 1}/${poses.length})`}
          </p>
        </div>

        {isModelLoading && (
          <div className="mb-6 p-4 bg-blue-50 border border-blue-200 rounded-lg">
            <div className="flex items-center space-x-3">
              <svg className="animate-spin h-5 w-5 text-blue-500" fill="none" viewBox="0 0 24 24">
                <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
              <p className="text-blue-600">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• AI...</p>
            </div>
          </div>
        )}

        {error && (
          <div className="mb-6 p-4 bg-red-50 border border-red-200 rounded-lg">
            <p className="text-red-600 text-sm">{error}</p>
            <Button
              onClick={initializeFaceApi}
              variant="secondary"
              className="mt-2 text-sm px-4 py-2"
            >
              ‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
            </Button>
          </div>
        )}

        <div className="relative mb-6">
          <div className="bg-gray-900 rounded-lg overflow-hidden aspect-video">
            <video
              ref={videoRef}
              className="w-full h-full object-cover"
              autoPlay
              muted
              playsInline
            />
            
            {isStreaming && !isModelLoading && (
              <div className="absolute inset-0 flex items-center justify-center">
                <div className={`border-4 rounded-full w-48 h-60 transition-colors duration-300 ${
                  isPoseReady(currentDetectedPose, currentPose.type, poseConfidence, isBlinking)
                    ? 'border-green-400 animate-pulse'
                    : 'border-purple-400'
                }`} />
              </div>
            )}

            <div className="absolute top-4 left-4">
              <div className={`flex items-center space-x-2 px-3 py-2 rounded-full text-sm ${
                isStreaming ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
              }`}>
                <div className={`w-2 h-2 rounded-full ${isStreaming ? 'bg-green-500' : 'bg-red-500'}`} />
                <span>{isStreaming ? '‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà' : '‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏õ‡∏¥‡∏î'}</span>
              </div>
            </div>
          </div>
        </div>

        {/* ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô */}
        {!isAllPosesVerified && (
          <div className="mb-6 p-4 bg-gray-50 rounded-lg">
            <div className="flex items-center space-x-3 mb-3">
              <span className="text-2xl">{currentPose.icon}</span>
              <div>
                <h3 className="font-semibold text-gray-800">{currentPose.title}</h3>
                <p className="text-sm text-gray-600">{currentPose.instruction}</p>
              </div>
            </div>
            
            {/* ‡πÅ‡∏ñ‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤ */}
            <div className="w-full bg-gray-200 rounded-full h-2 mb-2">
              <div 
                className="bg-purple-600 h-2 rounded-full transition-all duration-300"
                style={{ width: `${poseProgress}%` }}
              />
            </div>
          </div>
        )}

        {/* ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß */}
        <div className="mb-6">
          <div className="grid grid-cols-4 gap-2">
            {poses.map((pose, index) => (
              <div key={pose.type} className={`p-3 rounded-lg text-center transition-all ${
                verifiedPoses[pose.type] 
                  ? 'bg-green-100 border-2 border-green-300' 
                  : index === currentPoseIndex 
                    ? 'bg-purple-100 border-2 border-purple-300'
                    : 'bg-gray-100 border-2 border-gray-200'
              }`}>
                <div className="text-xl mb-1">{pose.icon}</div>
                <div className="text-xs font-semibold">{pose.title}</div>
                {verifiedPoses[pose.type] && (
                  <div className="text-green-600 text-lg">‚úì</div>
                )}
              </div>
            ))}
          </div>
        </div>

        <div className="space-y-3">
          {isAllPosesVerified ? (
            <div className="text-center">
              <div className="text-green-600 text-4xl mb-2">‚úì</div>
              <p className="text-green-600 font-semibold">
                {loading ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô...' : '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ó‡πà‡∏≤‡∏Ñ‡∏£‡∏ö‡∏ó‡∏±‡πâ‡∏á 4 ‡∏ó‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß'}
              </p>
            </div>
          ) : (
            <div className="text-center">
              <p className="text-gray-600">
                ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ó‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
              </p>
            </div>
          )}
        </div>
      </Card>
    </div>
  )
}